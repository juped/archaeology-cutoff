/-  demo-args
!:
:::::::::   Appbug: a simple application.
::
|_  [hid=hide vat=[%0 p=@ud]]
++  poke
  |=  [ost=bone you=ship *]
  :_  +>(p.vat +(p.vat))
  ~&  %poke
  :~  [ost %give %nice ~]
  ==
::
++  poke-demo-args
  |=  [ost=bone you=ship arg=demo-args]
  ~&  [%poke-demo-args arg]
  :_  +>(p.vat +(p.vat))
  :*  [ost %give %nice ~]
      %+  turn  (~(tap by sup.hid))
      |=  [ost=bone *]
      :-  ost
      :^  %give  %rush  %tang
      [rose/[" " ~ ~]^~[leaf/<p.arg> leaf/"says" leaf/(scow %ud q.arg)]]~
  ==
::
++  peer
  |=  [ost=bone you=ship pax=path]
  ?^  pax
    :_  +>.$  :_  ~
    [ost %give %rust %txt (crip "demo peeking {<p.vat>}")]
  :_  +>.$  :_  ~
  :+  ost  %give
  :-  %meta
  !>
  :-  %meta
  !>
  :-  %meta
  !>
  :-  %meta
  !>
  :-  %meta
  !>
  :-  %meta
  !>
  :-  %meta
  !>
  :-  %meta
  !>
  :+  %rust  %hymn
  ^-  manx
  ;html
    ;head
      ;title: Demo!
      ;script: urb.appl = '{(trip app.hid)}'
    ==
    ;body
      ;p: State is {<p.vat>}.
      ;button(onclick "bump()"): (Bump.)
      ;script
        ; var mess = 0
        ; 
        ; function bump() {
        ;   xhr = new XMLHttpRequest()
        ;   xhr.onload = function() { mess++} 
        ;   xhr.open("PUT", "/tim/" + [urb.user, urb.port, mess].join("/"))
        ;   xhr.setRequestHeader("content-type", "text/json")
        ;   xyro = {ship: urb.ship, appl: urb.appl, data: {}}
        ;   xhr.send(JSON.stringify({oryx: urb.oryx, xyro: xyro}))
        ; }
      ==
    ==
  ==
--
