---
logo: black
title: Nock
sort: 1
---

# Nock

> "The machine is complete not when there is nothing left to 
add, but when there is nothing left to take away." - St. Exupery

Nock, a combinator tree interpreter, is Urbit's VM.  Nock is Lisp
without the Lisp: without lists, functions, symbols, variables,
or macros.  Nock doesn't even have a formal syntax.  Other than
these minor differences, Nock is just Lisp.

But a precise definition of Nock, with no external dependencies,
is 200 words and fits on a T-shirt.  And Nock, unlike most simple
Lisps, is used as is; it's not designed to be extended or amended.

Nock uses "Kelvin versioning": version numbers are integer
degrees Kelvin.  At 0K, no further updates are possible.  The
current [spec](nock/4k) is at 4 Kelvin, roughly the temperature
of a good liquid-helium martini.

Why?  The goal of every language is stability.  There are two
paths to language stability: maturity and simplicity.  A young,
simple language can be as stable as a mature, complex one.

Is Nock a practical interpreter?  This site is hosted on an OS
(Arvo) written in a language (Hoon) that compiles itself to Nock.
(It's behind a cache, though.)

## Reasons to learn Nock

You don't need to learn Nock to code in Hoon, let alone to play
with Urbit.  But it's fun, it's not that hard, and it certainly
helps the rest of the system make sense.

## Ways to learn Nock

The best way to learn Nock is to implement it, in your favorite
Earth language, from just the [spec](spec).  While there's not much
use in a naive Nock interpreter, each independent implementation
actually helps reassure us that the axioms are unambiguous.

Some existing implementations are [here](implementations).  If
you write a new one, you don't have to use a new language.  But
definitely send us a pull request whether you do or don't.

In case you don't have time to write an interpreter, even a small
one, your second-best option is to follow the spec
[walkthrough](walkthrough).  After reading the walkthrough,
you'll be ready for the traditional Nock problem: decrement.
Write your own, or follow along with the [tutorial](decrement).

Once you've written decrement, you understand Nock by definition.
You can write other formulas, but there's not much point.  Since
Hoon is not much more than a macro assembler for Nock, there is
no real reason to generate Nock by hand instead of by Hoon.

Language geeks will enjoy our Nock 
[optimization overview](optimization).  e

And finally, check out Bruce Schwartz's awesome [illustrated Nock]().
