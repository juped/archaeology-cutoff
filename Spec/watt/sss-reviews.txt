Dear Curtis,

We are sorry to inform you that your paper has not been selected for
presentation at the Workshop on Self-sustaining Systems (S3) 2010 at The
University of Tokyo, Japan.

Attached you will find the reviewers' comments. We hope you find them
useful for improving your paper and for resubmitting to another event.

Best regards,
Hidehiko and Robert


===========================  REVIEWS  ==========================

---------------------------- REVIEW 1 --------------------------
PAPER: 3
TITLE: Watt: A Self-Sustaining Functional Language


SUMMARY

The author presents Watt and Nock. Watt is said to be a "functional
programming for stupid people like you". Nock is said to be the "model".

EVALUATION

A workshop contribution does not have to be perfect, but it needs to
be presented in a way that allows for a technical evaluation. This paper
is written in a different style. The paper is unclear and incomprehensible.
In many places it is vague, for example, "The relationship between Urth and
Earth is unclear". At some places it is humurous, for example, "Urth code
is nothing like Earth code". In other places it is simply insulting, for
example, "Watt is functional programming for stupid people like you".

Comments:

"Watt is C, A is the machine instruction set, B is the C source for CC,
and C is the executable for CC".  C???
"spec is is generally"=> "spec is generally"
"Watt is dishwater; Urbit is vaporware". What?
"eg" => "e.g.," Same for ie.
"It has has all the flaws" => "It has all the flaws"
"slowness, ..., and slowness".   Once is slow enough.



---------------------------- REVIEW 2 --------------------------
PAPER: 3
TITLE: Watt: A Self-Sustaining Functional Language


This paper presents a self-sustaining functional language: Watt.
Watt is defined by a very small kernel which compiles itself to
Nock, which is a simple non-lambda automaton.  Nock is defined
with very concise spec in English and pseudocode.

My major concern is that there is only an alpha release of the
language with a lot of flaws and I can not tell from the paper
if there are efficient and practical way to improve the flaws.
For example, to have Watt program with reasonable performance.

Although it seems the author has very good reason to use an
alien language to create Watt, it is still hard to understand
the language and design intuition.  It would be better if the
paper can explain more about the design intuition, for example,
why it only defines noun and does not introduce type, variables and
functions etc.  Also it is not clear about the programmability
of Watt.  What kinds of programs can easily be expressed?  And what kinds
of programs can it not easily express?  And it still looks not clear
to me in which domain Watt can beat other existing language and
how.

Also it would be good if there is an example to illustrate Watt.
A small but complete Watt program would be good.

There are some redundant words in the paper, for example: in
Section 1.2 Practical, the 5th paragraph, the second sentence,
there is an extra 'is' and in the 9th paragraph, the second
sentence, there is an extra 'since'.



---------------------------- REVIEW 3 --------------------------
PAPER: 3
TITLE: Watt: A Self-Sustaining Functional Language


The paper describes a minimal computation kernel (called Nock) and a statically typed functional language (Watt) built on top of it.

I think the approach of a minimal kernel with obvious execution semantics and a
real language that maps on top of it is interesting and well worth pursuing. It
is also clearly relevant to S3. The problem I have with this paper is that it
does not really help me to understand what is going on with Nock and Watt.
While Nock is probably fully specified by the formulas given, it is very hard
to see what they are doing. It would have been helpful to see some detailed
examples to understand Nock a bit more directly.

The same problem is even more pronounced for the section about Watt. We learn
some things about Watt (compiles to Nock, statically typed, type inference,
...), however, the actual working of the language remains unclear. The example
code in Figure 2 and 3 is essentially inscrutable. I think that again some very
simple and fully explained examples could have helped to understand the
language and the intuition behind it better. On the other hand, I regard some
parts of the Watt sections as not really necessary for the paper. It is not
that helpful to get a list of semi-arbitrary names for glyphs and digraphs.

I understand the reasoning behind not using standard names for constructs in
the language. However, the paper doesn't do a good enough job at telling me
what the non-standard names actually mean, which leads to the fact that I don't
understand the standard, nor the non-standard names.

Another issue of the paper is the idiosyncratic and partially arcane way to
describe things and the unconventional language. I was left with the impression
that this approach to writing was more an end in itself and not a mean to make
the reader understand better. While reading the paper I sometimes felt vaguely
insulted, which is not something you want your readers to be.
