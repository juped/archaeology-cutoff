::  Twitter daemon
::
::::  /hook/core/twit/app
  ::
::  /-    twit-do  ::  XX  wherefore broken
/+    twitter
::
::::  ~fyr
  ::
|%
++  twit-do                                             ::  action
  $%  [%auth p=keys]                                    ::  set API keys
      [%post p=@uvI q=cord]                             ::  post a tweet
  ==
::
++  twit-path                                           ::  valid peer path
  $%  [%home ~]                                         ::  home timeline
      [%user p=@t ~]                                    ::  user's tweets
      [%post p=@ta ~]                                   ::  status of status
  ==
::
++  axle                                                ::  app state
  $:  %0
      kes=(unit keys)                                   ::  auth
      out=(map ,@uvI (each cord ,@da))                  ::  sent tweets
      ran=(map path ,[p=@ud q=@da])                     ::  polls active
      fed=(map path tid:twit)                           ::  last id published
  ==
::
++  gift                                                ::  app response
  $%  [%nice ~]                                         ::  acknowledgement
      [%mean p=ares]                                    ::  error/termination
      [%rush p=gilt]                                    ::  subscription data
  ==
::
++  gilt  
  $%  [%twit-feed p=(list stat)]                        ::  posts in feed
      [%time p=time]                                    ::  accepted time
  ==
::
++  move  ,[bone (mold note gift)]
++  note                                                ::  arvo request
  $%  [%e %them ~ u=hiss]                               ::  HTTP request
      [%t %wait p=@da]                                  ::  timeout
  ==
::
++  sign                                                ::  arvo response
  $%  [%e %thou p=httr]                                 ::  HTTP result
      [%t %wake ~]                                      ::  timeout ping
  ==
::
++  stat  ,[id=@u who=@ta now=@da txt=@t]               ::  recieved tweet
--
!:
::::
  ::
|_  [hide axle]
++  auth  ~|(%no-auth ~(. twit (need kes) lat `@`eny))  ::  build API door
++  cull                                                ::  remove seen tweets
  |=  [pax=path rep=(list stat)]
  =+  pev=(~(get by fed) pax)
  ?~  pev  rep
  ::   ~&  do-cull/[u.pev (turn rep |=(stat id))]
  |-  ^+  rep
  ?~  rep  ~
  ?:  =(u.pev id.i.rep)  ~
  [i.rep $(rep t.rep)]
::
++  dely                                                ::  next polling timeout
  |=  pax=path
  ^-  [(unit time) _ran]
  =+  cur=(~(get by ran) pax)
  =+  tym=(add lat (mul ~s8 (bex ?~(cur 0 p.u.cur))))
  :: ~&  dely/`@dr`(sub tym lat)
  ?:  &(?=(^ cur) (gte tym q.u.cur) (gth q.u.cur lat))
    [~ ran]
  [`tym (~(put by ran) pax ?~(cur 0 (min 5 +(p.u.cur))) tym)]
::
++  wait                                                ::  ensure poll by path
  |=  [ost=bone pax=path mof=(list move)]
  =^  tym  ran  (dely pax)
  :_  +>.$
  ?~  tym  
    :: ~&  no-wait/ran
    mof
  :: ~&  will-wait/u.tym
  :-  [ost %pass pax %t %wait u.tym]
  mof
::
++  poke-twit-do                                        ::  recieve request
  |=  [ost=bone @ act=twit-do]
  ^+  [*(list move) +>]
  ?-    -.act
      %auth
    ::  ~&  twit-auth/p.act
    =.  kes  `p.act
    :_(+>.$ [ost %give %nice ~]~)                       ::  XX verify key
      %post
    =:  out  (~(put by out) p.act %& q.act)
        ran  (~(del by ran) /peer/home)
      ==
    %^  wait  ost  /peer/home
    :-  [ost %give %nice ~]
    =+  mez=(stat-upda:auth [%status q.act]~ ~)
    [ost %pass /post/(scot %uv p.act) %e %them ~ mez]~
  ==
::
++  pour                                                ::  recieve response
  |=  [ost=bone pax=path sig=sign]
  ^+  [*(list move) +>]
  ?-    &2.sig
      %wake
    ~&  wake/[pax sig]
    ?.  (~(has by ran) pax)                             ::  ignore if retracted
      `+>
    ?+  pax  ~|([%wake-missed pax] !!)
      [%peer *]  
        ?~  (~(get ju pus) t.pax)
          `+>
        ~&  peer-again/[t.pax ran]
        (peer ost our t.pax)
    ==
      %thou
    ?+    p.p.sig  ~|([%unknown-code p.p.sig] !!)
        429                           ::  Rate-limit
      =.  ran  (~(put by ran) pax 6 lat)
      =+  lim=%.(%x-rate-limit-reset ;~(biff ~(get by (mo q.p.sig)) poja ni:jo))
      =+  tym=?~(lim (add ~m7.s30 lat) (add ~1970.1.1 (mul ~s1 u.lim)))
      ~&  retrying-in/`@dr`(sub tym lat)
      :_(+>.$ [ost %pass pax %t %wait tym]~)
        200                           ::  OK
      =+  jon=(need (poja q:(need r.p.sig)))
  ::     ~&  twit-resp/%.(jon ?+(-.jon !! %o stat:twir, %a (ar:jo stat:twir)))
      ?+    pax  ~|([%http-missed pax] !!)
          [%post @ ~]                                   ::  post acknowledged
        =.  out  (~(put by out) (slav %uv i.t.pax) %| lat)
        :_  +>.$
        (weld (spam pax %rush %time lat) (spam pax %mean ~))
          [%peer *]                                     ::  feed data
        =+  ^=  rep
            ~|  [%bad-tweets jon]
            (need %.(jon (ar:jo stat:twir)))
        :: ~&  got-feed/[(scag 5 (turn rep |=(stat id))) fed]
        =.  rep  (cull t.pax rep)                       ::  only new messages
        ?~  rep
          (wait ost pax ~)                              ::  pump polling
        ~&  spam-feed/rep
        =:  ran  (~(del by ran) pax)                    ::  clear poll delay
            fed  (~(put by fed) t.pax id.i.rep)         ::  saw last message
          ==
        (wait ost pax (spam t.pax %rush twit-feed/(flop rep)))
      ==
        ?(400 401 403 404)            ::  Err
      =+  ^-  git=gift
          =+  err=%.(q:(need r.p.sig) ;~(biff poja mean:twir))
          :^  %mean  ~  %bad-http
          [leaf/"HTTP Code {<p.p.sig>}" (turn (need err) mean:twip)]
      ?+    pax  [[ost %give git]~ +>.$]
        [%post @ ~]
          [(spam pax git) +>.$]
  ==  ==
    ==
::
++  peer                                                ::  accept subscription
  |=  [ost=bone @ pax=path]
  ^+  [*(list move) +>]
  :_  +>.$
  ?.  ?=(twit-path pax)
    ~|([%missed-path pax] !!)
  =>  .(pax `twit-path`pax)
  :-  [ost %give %nice ~]
  ?:  ?=(%post -.pax)
    =+  sta=(~(get by out) (slav %uv p.pax))
    ?.  ?=([~ %| @] sta)                                ::  post not received
      ~
    :-  [ost %give %rush %time p.u.sta]
    [ost %give %mean ~]~                                ::  subscription end
  =-  [ost %pass [%peer pax] %e %them ~ `hiss`-]~
  ?-    -.pax
    %home  (stat-home:auth)
    %user  (stat-user:auth [(to-sd p.pax)]~ ~)
  ==
::
++  to-sd                                               ::  parse user name/numb
  |=  a=span  ^-  sd:twit
  ~|  [%not-user a]
  %+  rash  a
  ;~(pose (stag %user-id dem) (stag %screen-name user:twir))
::
++  pull                                                ::  release subscription
  |=  ost=bone
  =+  [his pax]=(~(got by sup) ost)
  ?:  (lth 1 ~(wyt in (~(get ju pus) pax)))
    `+>.$
  =:  ran  (~(del by ran) [%peer pax])
      fed  (~(del by fed) pax)
    ==
  `+>.$
::
++  spam                                                ::  send by path
  |=  [a=path b=gift]  ^-  (list move)
  %+  murn  (~(tap by sup))
  |=  [ost=bone @ pax=path]
  ^-  (unit move)
  ?.  =(pax a)  ~
  [~ [ost %give b]]
--
