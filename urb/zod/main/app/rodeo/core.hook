::
::::  /hook/core/rodeo/app
  ::
/?  314
/-  *radio
::
::::
  ::
!:
=>  |%                                                  ::  data structures
    ++  house  ,[%0 house-0]                            ::  full state
    ++  house-any                                       ::  app history
      $%  [%0 house-0]                                  ::  0: initial version
      ==                                                ::
    ++  house-0                                         ::
      $:  parties=(map span party)                      ::  conversations
          outbox=(pair ,@ud (map ,@ud thought))         ::  urbit outbox
      ==                                                ::
    ++  party                                           ::  a conversation
      $:  count=@ud                                     ::  (lent grams)
          grams=(list telegram)                         ::  all history
          present=(map ship status)                     ::  presence state
          sequence=(map station ,@ud)                   ::  stations heard
          shape=config                                  ::  configuration
          known=(map serial ,@ud)                       ::  messages heard
          guests=(set bone)                             ::  listeners
      ==                                                ::
    ++  gift                                            ::  result
      $%  [%rush report]                                ::  update
          [%rust report]                                ::  refresh
          [%mean ares]                                  ::  cancel
          [%nice ~]                                     ::  accept
      ==                                                ::
    ++  sign                                            ::  response
      $?  $:  %g                                        ::  application
      $%  [%mean p=ares]                                ::  cancel
          [%nice ~]                                     ::  acknowledge
          [%rush report]                                ::  update
          [%rust report]                                ::  refresh
      ==  ==  ==                                        ::
    ++  move  ,[p=bone q=(mold note gift)]              ::  all actions
    ++  hapt  ,[p=ship q=path]                          ::  app instance
    ++  note                                            ::  requests
      $?  $:  %g                                        ::  network
      $%  [%mess p=hapt q=ship r=cage]                  ::  message
          [%nuke p=hapt q=ship]                         ::  cancel
          [%show p=hapt q=ship r=path]                  ::  subscribe
      ==  ==  ==                                        ::
    --
|_  [hid=hide house]
++  ra                                                  ::  transaction core
  |_  [ost=bone moves=(list move)]
  ++  ra-abet                                           ::  resolve core
    ^-  [(list move) _+>]
    [(flop moves) +>]
  ::
  ++  ra-emil                                           ::  ra-emit move list
    |=  mol=(list move)  
    %_(+> moves (welp (flop mol) moves))
  ::
  ++  ra-emit                                           ::  emit a move
    |=  mov=move  
    %_(+> moves [mov moves])
  ::
  ++  ra-ever                                           ::  emit success
    (ra-emit ost %give %nice ~)
  ::
  ++  ra-evil                                           ::  emit error
    |=  msg=cord
    (ra-emit ost %give %mean ~ msg ~)
  ::
  ++  ra-apply                                          ::  apply command
    |=  [her=ship cod=command]
    ^+  +>
    ?-    -.cod
        %design
      ?.  =(her our.hid)
        (ra-evil %radio-no-owner)
      =+  pur=(~(get by parties) p.cod)
      ?~  q.cod
        ?~  pur
          (ra-evil %radio-no-party)
        =<  ra-ever  =<  pa-abet
        ~(destroy pa p.cod u.pur)
      =<  ra-ever  =<  pa-abet
      (~(reform pa p.cod ?~(pur *party u.pur)) u.q.cod)
    ::
        %review   ra-ever:(ra-think | her +.cod)
        %publish  ra-ever:(ra-think & her +.cod)
        %ping
      =+  pur=(~(get by parties) p.cod)
      ?~  pur
        (ra-evil %radio-no-party)
      =<  ra-ever  =<  pa-abet
      (~(notify pa p.cod u.pur) her q.cod)
    ==
  ::
  ++  ra-subscribe                                      ::  listen to
    |=  [her=ship pax=path]
    ^+  +>
    ?.  &(?=([%fm @ *] pax) ((sane %tas) i.t.pax))
      ~&  [%bad-subscribe pax]
      (ra-evil %radio-bad-path)
    =+  pur=(~(get by parties) i.t.pax)
    ?~  pur
      ~&  [%bad-subscribe-party i.t.pax]
      (ra-evil %radio-no-party)
    pa-abet:(~(listen pa i.t.pax u.pur) ost her t.t.pax)
  ::
  ++  ra-think                                          ::  publish/review
    |=  [pub=? her=ship tiz=(list thought)]
    ^+  +>
    ?~  tiz  +>
    $(tiz t.tiz, +> (ra-consume pub her i.tiz))
  ::
  ++  ra-consume                                        ::  consume thought
    |=  [pub=? her=ship tip=thought]
    =+  aud=`(list (pair station delivery))`(~(tap by q.tip) ~)
    |-  ^+  +>.^$
    ?~  aud  +>.^$
    $(aud t.aud, +>.^$ (ra-conduct pub her p.i.aud tip))
  ::
  ++  ra-conduct                                        ::  thought to station
    |=  [pub=? her=ship tay=station tip=thought]
    ^+  +>
    ?-  -.tay
      %&  ?:  pub
            =.  her  our.hid                            ::  XX security!
            ?:  =(her p.p.tay)
              (ra-record q.p.tay p.p.tay tip)
            (ra-transmit p.tay tip)
          ?:  =(our.hid q.p.tay)
            +>
          (ra-record q.p.tay p.p.tay tip)
      %|  ?.  pub  +>
          ~&  [%conduct-twitters]
          !!
    ==
  ::
  ++  ra-record                                         ::  add to party
    |=  [man=span gam=telegram]
    ^+  +>
    =+  pur=(~(get by parties) man)
    ?~  pur
      ~&  [%no-party man]
      +>.$
    pa-abet:(~(learn pa man u.pur) gam)
  ::
  ++  ra-transmit                                       ::  send to neighbor
    |=  [cuz=cousin tip=thought]
    ^+  +>
    =.  +>  
        %+  ra-emit  ost
        :*  %pass
            /transmit/(scot %ud p.outbox)
            %g
            %mess 
            [p.cuz /rodeo] 
            our.hid
            [%command !>(`command`[%review tip ~])]
        ==
    +>(p.outbox +(p.outbox), q.outbox (~(put by q.outbox) p.outbox tip)) 
  ::
  ++  pa                                                ::  party core
    |_  $:  man=span
            party
        ==
    ++  pa-abet
      ^+  +>
      +>(parties (~(put by parties) man `party`+<+))
    ::
    ++  admire                                          ::  accept from
      |=  her=ship
      ^-  ?
      ?-  -.cordon.shape
        %&  (~(has in p.cordon.shape) her)
        %|  !(~(has in p.cordon.shape) her)
      ==
    ::
    ++  scrub                                           ::  pass forward
      |=  bub=(list (pair path note))
      +>.$(moves (welp (flop (turn bub |=(a=(pair path note) [ost %pass 
    ::
    ++  send                                            ::  queue move
      |=  mov=move
      ^+  +>
      +>.$(moves [mov moves])
    ::
    ++  abjure                                          ::  unsubscribe move
      |=  tay=(list station)
      ?-  -.tay
          %|  !!
          %&  
        %-  send  
        :*  ost
            %pass
            /acquire
            %g
            %nuke
            [p.p.tay /rodeo]
            our.hid
        ==
      ==
    ::
    ++  acquire                                         ::  subscribe move
      |=  tay=station
      ^-  move
      ?-  -.tay
          %|  !!
          %&  
        :*  ost
            %pass
            /acquire
            %g
            %show
            [p.p.tay /rodeo]
            our.hid
            /fm/(scot %ud (fall (~(get by sequence) tay) 0))
        ==
      ==
    ::
    ++  destroy                                         ::  delete, not right
      (reform *config)
    ::
    ++  reform
      |=  cof=config
      =.  +>  (release `report`[%config cof])
      =+  ^=  dif  ^-  (pair (list station) (list station))   ::  XX ugly
          =+  old=`(list station)`(~(tap in sources.shape) ~)
          =+  new=`(list station)`(~(tap in sources.cof) ~)
          :-  (skip new |=(a=station (~(has in sources.shape) a)))
          (skip old |=(a=station (~(has in sources.cof) a)))
      %=    +>
          shape  cof
          moves
        ;:  welp
          
          ::  |-  ^-  (list move)
          ::  ?~  p.dif  ~
          ::  :-  ?:  s
          moves
        ==
      ==
    ::
    ++  cancel
      ^+  .
      =.  guests  (~(del in guests) ost)
      (send ost %give %mean ~)
    ::
    ++  notify
      |=  [her=ship per=presence]
      ^+  +>
      !!
    ::
    ++  listen                                     ::  incoming at
      |=  [ost=bone her=ship pax=path]
      ^+  +>
      =+  num=0
      =.  guests  (~(put in guests) ost)
      (send ost %give %rust %grams num (flop (scag (sub count num) grams)))
    ::
    ++  release
      |=  por=report
      ^+  +>
      =+  gus=guests
      |-  ^+  +>.^$
      ?~  gus  +>.^$
      =.  +>.^$  $(gus l.gus)
      =.  +>.^$  $(gus r.gus)
      +>.^$(moves [[n.gus %give %rush por] moves])
    ::
    ++  learn
      |=  gam=telegram
      ^+  +>
      ?.  (admire p.gam)
        ~&  %admire-rejected
        +>.$
      =+  old=(~(get by known) p.q.gam)
      ?~  old
        (append gam)
      (revise u.old gam)
    ::
    ++  append
      |=  gam=telegram
      ^+  +>
      =.  +>  (release %grams count gam ~)
      %=  +>
        count  +(count)
        known  (~(put by known) p.q.gam count)
      ==
    ::
    ++  revise
      |=  [num=@ud gam=telegram]
      =.  +>  (release %grams num gam ~)
      =+  way=(sub count num)
      %=    +>.$
          grams  
        (welp (scag (dec way) grams) `(list telegram)`[gam (slag way grams)])
      ==
    --
  --
++  peer
  |=  [ost=bone her=ship pax=path]
  ^-  [(list move) _+>]
  ra-abet:(~(ra-subscribe ra ost ~) her pax)
::
++  poke-command
  |=  [ost=bone her=ship cod=command]
  ^-  [(list move) _+>]
  ~&  [%rodeo-poke-command her cod]
  ra-abet:(~(ra-apply ra ost ~) her cod)
::
++  pour
  |=  [ost=bone pax=path sih=*]
  ^-  [(list move) _+>]
  ::  ~&  sih=sih
  =+  sih=((hard sign) sih)
  ~&  sign=sih
  [~ +>.$]
::
++  pull
  |=  ost=bone
  ^-  [(list move) _+>]
  ~&  [%pull ost]
  [~ +>]
--
