::    Shell
::
::::  /hook/core/shell/app
  ::
/?    314
/-    term-line
/=    seeb  /~  !>(.)
::
::::  structures
  ::
|%                                                      ::
++  gift                                                ::
  $%  [%mean p=ares]                                    ::
      [%nice ~]                                         ::
  ==                                                    ::
++  hapt  ,[p=ship q=path]                              ::
++  move  ,[p=bone q=(mold note gift)]                  ::
++  note                                                ::
  $%  $:  %g                                            ::
  $%  [%cide p=span]                                    ::
      [%show p=hapt q=ship r=path]                      ::
      [%sire p=term q=span]                             ::
      [%mess p=hapt q=ship r=cage]                      ::
      [%meta p=vase]                                    ::
  ==  ==  ==                                            ::
++  coma                                                ::
  $%  [%start p=term q=(list twig)]                     ::
      [%end p=cord]                                     ::
      [%path p=path]                                    ::
      [%hoon p=twig]                                    ::
  ==                                                    ::
++  sign                                                ::
  $%  $:  %g                                            ::
  $%  [%gone p=hapt]                                    ::
      [%mean p=ares]                                    ::
      [%nice ~]                                         ::
      [%rush p=%tang q=(list tank)]                     ::
      [%rust p=%tang q=(list tank)]                     ::
  ==  ==  ==                                            ::
--
!:
::::  program
  ::
|_  [hid=hide pid=@u pax=_`path`/=try=]
++  maybe
  |*  fel=_rule
  ;~  pose
    (stag ~ fel)
    (easy ~)
  ==
::
++  args
  (star ;~(pfix ace wide:(vang | pax)))
::
++  parse
  ^-  $+(nail (like coma))
  =+  paf=?.(=('0' &3.pax) pax pax(&3 (scot da/lat.hid)))
  ;~  pose
    (stag %start ;~(pfix col ;~(plug sym args(pax paf))))
    (stag %end ;~(pfix sem sym))
    (stag %path (sear plex rood):(vang | pax))
    (stag %hoon wide:(vang | paf))
  ==
::
++  poke-txt
  |=  [ost=bone you=ship txt=cord]
  ^-  [(list move) _+>]
  =+  com=(rush txt parse)
  ?~  com
    :_  +>.$
    :~  [ost %give %nice ~]
        (print ost you leaf/"Clarify {(trip txt)}" ~)
    ==
  ?-    -.u.com
      %path
    =.  pax  p.u.com
    :_  +>.$
    :~  [ost %give %nice ~]
        (print ost you leaf/"=% {(spud p.u.com)}" ~)
    ==
  ::
      %start
    =+  cil=(scot %ud pid)
    =.  pid  +(pid)
    :_  +>.$
    :~  :^  ost  %pass  /child/[cil]/main
        :+  %g  %meta  !>
        :*  %mess  [our.hid cil imp.hid]  you
            (cat 3 p.u.com '-args')  (slap seeb [%clsg q.u.com])
        ==
        [ost %pass /child/[cil]/lines %g %show [our.hid cil imp.hid] you /lines]
        [ost %pass /child/[cil] %g %sire p.u.com cil]       ::  XX strange order?
        (print ost you leaf/"running {(trip p.u.com)}" ~)
    ==
  ::
      %end
    :_  +>.$
    =*  cil  p.u.com
    :*  (print ost you leaf/"killing {(trip cil)}" ~)
        %+  murn  (~(tap by cub.hid))  |=  [a=span b=term]
        ?.  =(b cil)  ~
        %-  some
        [ost %pass /child/[a] %g %cide a]
    ==
  ::
      %hoon
    :_  +>.$
    :~  (print ost you (sell (slap seeb p.u.com)) ~)
        [ost %give %nice ~]
    ==
  ==
::
++  pour
  |=  [ost=bone pax=path sih=*]
  ^-  [(list move) _+>]
  ::  ~&  [%shell-pour -.sih (,@ta +<.sih)]
  =+  sih=((hard sign) sih)
  :_  +>.$
  ?~  pax  ~&  %no-path  !!
  ?+    &1.pax  ~&  %strange-path  !!
      %print
    ~
  ::
      %child
    ?~  |1.pax  ~&  %no-child  !!
    ?~  |2.pax
      ?>  ?=(%gone +<.sih)
      [ost %give %nice ~]~
    ?+    &3.pax  ~&  %strange-child-path  !!
        %main
      ?>  ?=(?(%nice %mean) +<.sih)
      [ost %give +.sih]~
        %lines
      ?.  ?=(?(%rust %rush) +<.sih)  ~
      :_  ~  (print ost our.hid q.sih)
    ==
  ==
::
++  print
  |=  [ost=bone you=ship tan=(list tank)]
  =.  &3.pax  ?.(=('0' &3.pax) &3.pax '=')
  :*  ost  %pass  /print  %g  %mess
      [our.hid +.imp.hid]  you
      %term-line  !>(`term-line`[(spat pax) tan])
  ==
--
