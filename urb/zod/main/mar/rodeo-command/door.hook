::
::::  /hook/door/rodeo-command/mar
  ::
/?    314
/-    *rodeo
!:
|_  cod=command
::
++  grab                                                ::  convert from
  |%
  ++  noun  command                                     ::  clam from %noun
  ++  json 
    =>  [jo ..command]
    |=  a=json  ^-  command
    =-  (need ((of -) a))
    =<  :~  publish/(ar thot)
            review/(ar thot)
            design/(ot party/so config/(mu conf) ~)
        ==
    |%
    ++  op                                              ::  parse keys of map
      |*  [fel=_rule wit=fist]
      %+  cu  mo
      %-  ci  :_  (om wit)
      |=  a=(map cord ,_(need *wit))
      ^-  (unit (list ,_[(wonk *fel) (need *wit)]))
      (zl (turn (~(tap by a)) (head-rush fel)))
    ::
    ++  as                                              ::  array as set
      :: |*(a=fist (cu sa (ar a)))  ::  XX  types
      |*  a=fist 
      %-  cu  :_  (ar a)
      ~(gas in *(set ,_(need *a)))
    ::
    ++  lake  |*(a=_,* $+(json (unit a)))
    ++  peach
      |*  a=_[rule rule]
      |=  tub=nail  
      ^-  (like (each ,_(wonk (-.a)) ,_(wonk (+.a))))
      %.  tub
      ;~(pose (stag %& -.a) (stag %| +.a))
    ::
    ++  head-rush
      |*  a=_rule
      |*  [b=cord c=*]
      =+  nit=(rush b a) 
      ?~  nit  ~
      (some [u.nit c])
    ::
    ::
    ++  thot
      ^-  $+(json (unit thought))
      %-  ot  :~
        serial/(ci (slat %uv) so)
        audience/audi 
        statement/stam
      ==
    ::
    ++  audi  (op parn memb)                            ::  audience
    ++  auri  (op parn (ci (soft presence) so))
    ++  memb  (ot envelope/lope delivery/(ci (soft delivery) so) ~)
    ++  lope  (ot visible/bo sender/(mu (su parn)) ~)
    ::
    ++  parn
      ^-  $+(nail (like partner))
      %+  peach
        ;~((glue fas) ;~(pfix sig fed:ag) urs:ab)
      %+  sear  (soft passport)
      ;~((glue fas) sym urs:ab)                         ::  XX  [a-z0-9_]{1,15}
    ::
    ++  stam
      ^-  $+(json (unit statement))
      =-  (ot date/di bouquet/(as (ar so)) speech/(of -) ~)
      :~  own/so
          say/so
          lin/(ot say/bo txt/so ~) 
          ::  exp/(cu |=(a=cord [a ~]) so)
          ::  inv/(ot ship/(su fed:ag) party/(su urs:ab) ~)
      ==
    ::
    ::
    ++  conf
      ^-  $+(json (unit config))
      %-  ot  :~
        sources/(as (su parn))
        caption/so
        :-  %cordon
        (ot posture/(ci (soft posture) so) list/(as (su fed:ag)) ~)
      ==
  --
--  --

