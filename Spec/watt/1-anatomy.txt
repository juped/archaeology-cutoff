Anatomy of Watt: 1, Molds

One of the errors most people make when they write their first
few programming languages is to specify the language before they
write the implementation.  They then compound this error by
designing the language before they specify it.  And worst of all,
they describe it before they design it.

Having made all these mistakes more than once myself, I was
determined to avoid them in Watt.  Fortunately, I now have a
reasonably complete and working Watt, so I can describe it!  The
best way to learn Watt will always be to read the code, though.

[Note that this is a DRAFT description; Watt, still, does not
exist.  It will not even have a Kelvin number until it boots.
Moreover, instead of "reading the code" in Watt, you have to read
it in C and Yacc - both harder, and less rewarding.  Also, I
would avoid actually playing with the build for a couple of days
- there is still some medium-scale surgery to be done.  Besides,
more actual lessons will follow.]

Watt is based on Nock, of course.  Most specifically, Watt is
defined as a pair of gates in the Watt kernel: the Watt grammar
and the Mill composer.

  ::::::::  Watt: the grammar
  ::
    - watt
      ||  gene
        src = text
      ==
        ::  Parse Watt source.
        ::
        [...]

  ::::::::  Mill: the composer
  ::
    - mill
      ||  [mol=mold noc=nock]
        sub = mold
        gen = gene
      ==
        ::  Generate Nock code and infer type.
        ::
        [...]

Here at Moron Lab, we are of the total-immersion school of
programming-language pedagogy.  One of the many reasons it's
foolish to write your language documentation before your language
is that it's just impossible to keep your pseudocode up to date.

Therefore, let's dive into Watt with some straight-up code.
Everything below is working Watt or my error.  I swear.

So if the syntax above is not self-explanatory to you, here is
a trivial decrement in Watt:

  ||  @
    z = @
  ==
    :: Transform [z] to "(z - 1)"
    ::
    =>  a 0
    |-
      ?:  (eq z (inc a))
        a
      $(a (inc a))

The algorithm (which is O(n)) should be obvious on inspection.
"@" is pronounced "atom."

We can also write Nock in Watt.  Note that this code cheats: it
delegates basic Nock functions to... Nock.   The whole exercise
is pointless, because we could express it as

  ||  *
    z = *
  ==
    :3.z

Nonetheless, this code closely resembles the present spec and
functions perfectly as written below.  "*" is pronounced "blur,"
meaning "any noun."

  ||  *
    z = *
  ==
    :: Compute "Nock(a)" - 9K.
    ::
    ?-  z
      -   [a 0 b=@]
        $(z :3.[a.z 0 b.z])   :: cheating

      -   [a 1 b=*]
        b

      -   [a 2 b=* c=* d=*] 
        $(z [a.z 3 [0 1] 3 [1 c.z d.z] [1 0] 3 [1 2 3] [1 0] 5 5 b.z])

      -   [a 3 b=*]
        $(z $(z [a.z b.z])) 

      -   [a 4 b=*]
        $(z :3.[a.z 4 b.z])   :: cheating

      -   [a 5 b=*]
        $(z :3.[a.z 5 b.z])   :: cheating

      -   [a 6 b=*]
        $(z :3.[a.z 6 b.z])   :: cheating
         
      -   [[a=* b=*] c=*]
        [$(z [a.z b.z]) $(z c.z)]
    ==

We could also, of course, write:

      -   [a 2 b=* c=* d=*] 
        ?:  $(z [a.z b.z])
          $(z a.z c.z)
        $(z a.z d.z)

Which should give the semantics of 2 away!

But this is an entirely intuitive introduction.  It should under
no circumstances be mistaken for a definition, or even a tutorial.
It is just meant to explain what I mean when I use Watt syntax,
in a paralinguistic Rosetta-Stone sort of way.

To understand Watt in a concrete way, let's see those gates again:

  ::::::::  Watt: the reader (ie, syntax)
  ::
    - watt
      ||  gene
        src = text 
      ==
        ::  Parse source.
        ::
        [...]

  ::::::::  Mill: the composer (ie, compiler)
  ::
    - mill
      ||  [mol=mold noc=nock]
        sub = mold
        gen = gene
      ==
        ::  Generate code and infer type.
        ::
        [...]

In programmer-English, Watt is a function that transforms a text
file (as a Nock atom) into a Watt AST (as a Nock noun).  Mill is
a function that transforms a Watt type (again a Nock noun, of
course) into a Watt type and a Nock formula.

A Watt type is called a "mold."  The abstract syntax tree (ie,
your code read in, with minimal processing, as a data structure)
is called a "gene."

(Why this unusual language?  Why not call a type a type?  Because,
as a programmer, the word "type" already means something to you.
Moreover, there is actually more than one concept in Watt for
which we might use the word "type."  It's entirely possible that
people will just end up calling molds "types," but anyone you see
instantiating this meme should be vigorously chastised!  As for
the superiority of "gene" over "AST", I will admit no argument.)

Mill is a function that transforms an ordered pair of
two nouns, [sub gen], to another ordered pair, [mol noc].

Let's look at these mysterious nouns, the molds.  Here is the
definition of a mold:

  ::::::::  mold
  ::
    - mold
      |~
      **
        %atom
        %blot
        %blur
        [%cell p=mold q=mold]
        [%cone p=mold q=(bush mark gene)]
        [%cube p=*]
        [%face p=mark q=mold]
        [%fork p=mold q=mold]
        [%fuse p=mold q=mold]
        [%hold p=mold q=gene]
     ==

Peculiarly enough, this gate is both the definition of a mold and
its implementation.  For instance, if you have a random noun, n,
which you're hoping might be a mold, 

  (mold n)

will produce n if n is a mold, and exit if n is not a mold.  The
result, of course, will be in mold [mold] - ie, it will be typed.
(We say "in mold foo" instead of "of type foo.")

This is called "rectifying" n.  Rectification is quite useful in
the context of network communication - it is common to receive
generic, unvalidated data from foreign sources, and need to
import it into a strictly-typed programming language, a task
commonly done ad hoc or not at all.

But I digress.  Let's describe the type system - I mean, the
mold system.

First, the philosophy of this system is the same minimalism
you've already seen in Nock.  Unlike Nock, Watt is not quite
complete - there are a few bells and whistles I want to add,
which will result in two or three more forks of mold.  However,
the definition above is sufficient for quite a rich programming
experience.  The bells and whistles will make rectification more
powerful and facilitate object-oriented programming.  Even with
the above, however, OOP is doable - just a little "ghetto."

Let's walk through this data structure very quickly, and we'll
keep your introduction to Watt short and easy to chew.

A mold satisfies the two basic requirements of any type or data
description system.  

One: a mold unambiguously defines a set of nouns.  For any mold and
any noun, that noun is either in the mold or not in the mold.
Without the bells and whistles, we cannot describe all such sets,
but even without the bells and whistles we can express just about
any practical data structure.

(For instance, a mold is to nouns much as an XML DTD or schema is
to valid XML.  The difference is that nouns are much simpler than
XML; molds are much, much, much simpler than XML Schema; and XML
does not ship with a functional programming language.  So it's a
little like comparing an oxcart to a Ducati.  But both are
perfectly effective ways of getting from point A to point B.)

Two: a mold ascribes semantics to nouns in the mold.  More
precisely, it defines a namespace on the noun.  A name in Watt is
called a "port"; a path is a "wire."  When you see [a.z] above,
this is referencing port "a" in port "z" in the subject.  (Note
that in most Earth programming languages, this would be "z.a".)
[$] is simply the name 0 - sometimes a name is superfluous.

Ports can be fragments of the subject ("parts") or computed
functions ("hooks").  You can also hack into a noun with a direct
fragment address - eg, [+2] for the head, [+3] for the tail.

Lisp programmers learning Watt may be slightly puzzled by the
lack of an environment.  Indeed, the simplest way to describe
Watt to someone who knows Lisp is: Lisp without an environment.

Instead, every Watt gene is evaluated relative to a single noun
which contains all data *and code* available to that gene.  This
is called "the subject."  Thus, when we compute

  (mill mol gen)

and produce a product

  [pro=[mol=mold noc=nock]]

we are saying: produce the Nock formula, [noc.pro], that computes
the function defined by [gen] on a subject in mold [mol].  The
result of this function will be in mold [mol.pro].

Let's list the mold forks quickly, and we'll be done with this
lesson.  Frankly, my previous essays have been too long.  There
are two kinds of mold: the obvious kind, and the non-obvious
kind.  First, the former.


Three atomic molds: %atom, %blot, %blur.  %atom means: any
atom.  %blur means: any noun.  %blot means: no nouns (ie,
"void").  I trust there is no rocket science here.  None of these
export any ports.

[%cube p=*]: a constant noun.  Any noun that equals [p] is in the
mold; any noun that does not, is not.  No ports are exported.

[%cell p=mold q=mold]: a cell, ie, ordered pair.  [p] is the mold
of the head; [q] the mold of the tail.  Exports all ports of [p]
and [q]; any conflict is an error.

[%fork p=mold q=mold]: set union of the molds [p] and [q].
Exports any port for which [p] and [q] define the same formula.
Symmetric; [%fork q p] has the same semantics as [%fork p q].

[%fuse p=mold q=mold]: set intersection of the molds [p] and [q].
Asymmetric; [q] has higher priority, ie, [p] cannot change or
conceal the semantics of [q].

[%face p=mark q=mold]: name a part.  Exports the name [p].  For
ports in [q], read through [p] - eg, in the Nock example above,
[a.z] works but [a] will give you "port not found."  [p] may not
be 0 - port 0 is always a hook, never a part.

Now, the above are all the *obvious* molds.  If you were writing
a simple data-description model, the noun equivalent of a DTD,
for finite static nouns, they might even be sufficient.  But for
actual functional programming, we need two more: %cone and %hold.
If your brain has been nodding "duh, duh, of course" up to this
point, it's time for it to sit up and pay attention!


[%cone p=mold q=(bush mark gene)]: executable code.  A bush is
simply a data structure which, like Nock formulas, overloads the
head atom: it is either

  [mark gene]

mark being an atom - ie, a symbol - or

  [(bush mark gene) (bush mark gene)]

with a tree search order.  Thus, what we're looking at here is...
a symbol table.  Very comparable to a vtable in C++.  Okay, we
may still be in "duh" territory.

The nouns in the cone are of the form [data code]. [data]
is a noun in the mold [p].  [code] matches the geometry of [q];
every leaf 

  [mark gene]

becomes the Nock formula

  noc.(mill [%cone p q] gene)

A cone exports all the marks in its book as hooks.  If the port
equals the mark, the formula produced calls the hook formula,
with a subject that is the entire cone (not just the cone head).

So, for instance, the Nock equivalent of a lambda is a "gate."
This is always a mold of the form

  [%cone 
    [%cell arg=mold env=mold]
    [0 gene]
  ]

Ie, the data in a gate is an argument-environment pair (so there
*is* an environment - it's just reentrant), and a hook whose name
is 0 (ie, [$]).  To invoke the lambda, replace the default
argument with a compatible value of your choice, and use the
hook.

When you write

  (dec x)

you are actually invoking *two* hooks.  First, [dec] resolves to
a hook in the kernel which produces a decrement gate.  Second,
you replace the argument [+4] in that gate with [arg], and invoke
the formula.

Note, in particular, that Watt never calculates "type signatures"
for code.  Rather, the gene is simply embedded in the mold!  And
since different genes generate different formulas, cones with
different books are never in any sense compatible.  If this makes
you wonder how we do higher-order polymorphism, it should!
Suffice it to say: there's a trick.


[%hold p=mold q=gene]: delayed evaluation.  For all but cosmetic
purposes, [%hold p q] is equivalent to

  mol.(mill p q)

Ie, [%hold p q] is the mold produced by gene [q] in mold [p].

Some programming languages support infinite data structures.
Watt is not one of these; all Watt data structures are Nock
nouns, and all Nock nouns are finite.

However, we often find ourselves needing to describe *indefinite*
data structures.  For example, a list of pairs of atoms:

  (list :[@ @])

Nouns in this mold include

  0
  [[3 7] 0]
  [[2 3] [37 42] 0]

And so on.  Clearly, a list can be as long as you want.  Clearly,
since molds are Nock nouns, and Nock nouns are finite, we must
define this infinitely-large set, containing indefinitely-large
nouns, with a single mold which is a finite noun.  Yikes!

Nor is [list] a built-in feature.  If you scroll back up to the
mold definition, you will not see any mention of lists - or any
other generic data structure.  Actually, [list] is just a gate
in the kernel, like [dec] or [add] or [mill].

So when I write

  ((list :[@ @]) [[2 3] [37 42] 0])

ie, rectifying this noun, just as we might write

  (mold [%cell %atom [%fork [%cube 12] [%cube 32]]])

what is the product mold?  We'll see the answer in the next
lesson.  But it can only involve %hold.

In Watt, a finite and strict language, %hold is essentially lazy
evaluation done manually.  A list mold is *logically* infinite -
that is, if you keep evaluating the holds, you can evaluate them
ad infinitum.  If Watt was implemented in Haskell, this would be
done automatically rather than manually, and molds would be an
infinite/lazy data structure.

But Watt is defined in Watt, not Haskell.  (Well, it should
be defined in Watt.  Right now, of course, it's in C.)  So
lazy evaluation happens manually - we expand a %hold when we need
to, and not otherwise.

A crucial property of Watt that makes this work is that all molds
are *rational*: that is, we can expand them indefinitely, but at
a certain point they always repeat themselves.  This allows us to
compute the obvious set-theoretic functions needed for any type
system, such as mold compatibility and orthogonality, without
going into an infinite loop.  It is possible to define Watt genes
for which Mill is very slow, but it is not possible to define
Watt genes for which it goes into an infinite loop.  Or, at
least, if it is, there's a bug in my code!

All right.  I think this is enough for one lesson.  

Here is a concrete problem to cogitate on: how would you write a
function that tests whether molds A and B are orthogonal (no noun
is in both A and B)?  Or compatible (any noun in A is also in B)?
Are these functions NP-complete?  If so, how might one work
around this in practice?
