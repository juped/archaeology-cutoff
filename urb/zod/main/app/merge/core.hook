::  Desk sync
::  
::::  /hook/core/sync/app
  ::
|%
++  merge-state
  $:  auto=?
      gem=germ
      her=@p
      sud=@tas
  ==
++  gift
  $%  [%mean p=ares]
      [%nice ~]
      [%rush %tang (list tank)]
  ==
++  move  ,[p=bone q=(mold note gift)]
++  note
  $%  $:  %c
  $%  [%merg p=@p q=@tas r=@p s=@tas t=germ]
  ==  ==
      $:  %g
  $%  [%cide span]
      [%mess p=[ship path] q=ship r=cage]
  ==  ==  ==
++  sign
  $%  $:  %c
  $%  [%mere are=(each (set path) (pair term (list tank)))]
  ==  ==
      $:  %g
  $%  [%mean p=ares]
      [%nice ~]
  ==  ==  ==
--
!:
::::
  ::
|_  [hid=hide merges=(map desk merge-state)]
++  me
  |=  [ost=bone syd=desk]
  =+  `merge-state`(fall (~(get by merges) syd) *merge-state)
  =|  mow=(list move)
  |%
  ++  abet
    [(flop mow) ..me(merges (~(put by merges) syd auto gem her sud))]
  ::
  ++  blab
    |=  new=(list move)
    ^+  +>
    +>.$(mow (welp new mow))
  ::
  ++  end   ?:(?=([* ~ ~] merges) . (blab [0 %pass / %g %cide %$] ~))
  ++  win   end:(blab [ost %give %nice ~] ~)
  ++  lose  end:(blab [ost %give %mean ~] ~)
  ::
  ++  merge
    ^+  .
    (blab [ost %pass /[syd] %c %merg our.hid syd her sud gem] ~)
  ::
  ++  fancy-merge                                       ::  recurse
    |=  [syd=desk her=@p sud=desk gem=$|(%auto germ)]
    ^+  +>
    %-  blab  :_  ~
    :*  ost  %pass  /[syd]  %g  %mess  [our.hid imp.hid]  our.hid
        %merge-args  !>([our.hid syd her sud gem ~])
    ==
  ::
  ++  spam  (corl blab ^spam)
  ++  start
    |=  [her=@p sud=@tas gim=$|(%auto germ)]
    ^+  +>
    ?.  ?=(%auto gim)
      merge(auto |, gem gim, her her, sud sud)
    ?:  =(0 .^(%cw /(scot %p our.hid)/[syd]/(scot %da lat.hid)))
      =>  $(gim %init)
      .(auto &)
    =>  $(gim %fine)
    .(auto &)
  ::
  ++  work
    |=  sih=sign
    ^+  +>
    ?:  ?=(%meld gem)
      ?:  ?=(%g -.sih)
        ?:  ?=(%nice +<.sih)
          =>  (spam leaf/"set up scratch space" ~)
          merge(syd (cat 3 syd '-scratch'))
        =+  :-  "failed to set up conflict resolution scratch space"
            "I'm out of ideas"
        lose:(spam leaf/-< leaf/-> ~)
      ?>  ?=(%c -.sih)
      ?:  ?=(%& -.are.sih)
        ?.  auto
          =+  "successfully merged with strategy {<gem>}"
          win:(spam leaf/- ?~(p.are.sih ~ [>`(set path)`p.are.sih< ~]))
        =+  (trip (cat 3 syd '-scratch'))
        =+  ^-  (list tape)
            :~  "done setting up scratch space in %{-}"
                "please resolve conflicts in the following files and run"
                ":merge %{(trip syd)} {<our.hid>} %{-}"
                ""
                "conflicts in:"
            ==
        win:(spam (welp (turn - (cury same %leaf)) [>p.are.sih< ~]))
      =+  "failed to merge with strategy {<p.p.are.sih>}"
      lose:(spam leaf/- q.p.are.sih)
    ?>  ?=(%c -.sih)
    ?:  ?=(%& -.are.sih)
      =+  "successfully merged with strategy {<gem>}"
      win:(spam leaf/- ?~(p.are.sih ~ [>`(set path)`p.are.sih< ~]))
    ?.  auto
      =+  "failed to merge with strategy {<p.p.are.sih>}"
      lose:(spam leaf/- q.p.are.sih)
    ?+    gem
      (spam leaf/"strange auto" >gem< ~)
    ::
        %init
      =+  :-  "auto merge failed on strategy %init"
          "I'm out of ideas"
      lose:(spam leaf/-< leaf/-> [>p.p.are.sih< q.p.are.sih])
    ::
        %fine
      ?.  ?=(%bad-fine-merge p.p.are.sih)
        =+  "auto merge failed on strategy %fine"
        lose:(spam leaf/- >p.p.are.sih< q.p.are.sih)
      =>  (spam leaf/"%fine merge failed, trying %meet" ~)
      merge(gem %meet)
    ::
        %meet
      ?.  ?=(%meet-conflict p.p.are.sih)
        =+  "auto merge failed on strategy %meet"
        lose:(spam leaf/- >p.p.are.sih< q.p.are.sih)
      =>  (spam leaf/"%meet merge failed, trying %mate" ~)
      merge(gem %mate)
    ::
        %mate
      ?.  ?=(%mate-conflict p.p.are.sih)
        =+  "auto merge failed on strategy %mate"
        lose:(spam leaf/- >p.p.are.sih< q.p.are.sih)
      =>  .(gem %meld)
      =+  tic=(cat 3 syd '-scratch')
      =>  =+  "%mate merge failed with conflicts, %melding into %{(trip tic)}"
          [tic=tic (spam leaf/- ~)]
      (fancy-merge tic our.hid syd %auto)
    ==
  --
++  peer  ,_`.
++  poke--args
  |=  [ost=bone you=ship syd=@tas her=@p sud=@tas gim=?([$|(%auto germ) ~] ~)]
  ^-  [(list move) _+>.$]
  ?~  gim
    $(gim [%auto ~])
  abet:(start:(me ost syd) her sud -.gim)
::
++  pour
  |=  [ost=bone pax=path sih=*]
  ^-  [(list move) _+>.$]
  =+  ((soft sign) sih)
  ?~  -
    [(spam leaf/"not working so well" >sih< ~) +>.$]
  abet:(work:(me ost -.pax) u)
::
++  spam
  |=  mes=(list tank)
  ^-  (list move)
  %+  turn  (~(tap in (~(get ju pus.hid) /out)))
  |=  ost=bone
  [ost %give %rush %tang mes]
--
