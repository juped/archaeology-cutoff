::
::::  /hook/door/radio-command/mar
  ::
/?    314
/-    *radio
!:
|_  cod=command
::
++  grab                                                ::  convert from
  |%
  ++  noun  command                                     ::  clam from %noun
  ++  json 
    =>  [jo ..command]
    |=  a=json  ^-  command
    =-  (need ((of -) a))
    =<  :~  publish/(ar thot)
            review/(ar thot)
            design/(ot party/so config/(mu conf) ~)
            ping/auri
        ==
    |%
    ++  as                                              ::  array as set
      :: |*(a=fist (cu sa (ar a)))  ::  XX  types
      |*  a=fist 
      %-  cu  :_  (ar a)
      ~(gas in *(set ,_(need *a)))
    ::
    ++  lake  |*(a=_,* $+(json (unit a)))
    ++  peach
      |*  a=_[rule rule]
      |=  tub=nail  
      ^-  (like (each ,_(wonk (-.a)) ,_(wonk (+.a))))
      %.  tub
      ;~(pose (stag %& -.a) (stag %| +.a))
    ::
    ++  thot
      ^-  $+(json (unit thought))
      %-  ot  :~
        serial/(ci (slat %uv) so)
        audience/audi 
        statement/stam
      ==
    ::
    ++  audi  (op stati (ci (soft delivery) so))        ::  audience
    ++  auri  (op stati (ci (soft presence) so))
    ::
    ++  stati
      ^-  $+(nail (like station))
      %+  peach
        ;~((glue fas) ;~(pfix sig fed:ag) urs:ab)
      %+  sear  (soft partner)
      ;~((glue fas) sym urs:ab)                         ::  XX  [a-z0-9_]{1,15}
    ::
    ++  stam
      ^-  $+(json (unit statement))
      =-  (ot now/di speech/(of -) ~)
      :~  own/so
          say/so
          exp/(cu |=(a=cord [a ~]) so)
          inv/(ot ship/(su fed:ag) party/(su urs:ab) ~)
      ==
    ::
    ::
    ++  conf
      ^-  $+(json (unit config))
      %-  ot  :~
        sources/(as (su stati))
        :-  %cordon
        %+  cu  |*(a=^ ?~(-.a a a))                     ::  XX  do type stuff
        (ot white/bu list/(as (su fed:ag)) ~)
      ==
  --
--  --

